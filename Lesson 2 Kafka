Ответы на тест:
Ответы на тест

Зачем использовать брокер сообщений вместо HTTP?
✅ B) Чтобы работать асинхронно и выдерживать нагрузки.
Пояснение: Kafka разгружает сервисы и позволяет обрабатывать события независимо от доступности потребителя.

Что такое топик в Kafka?
✅ B) Поток сообщений, логическая сущность.
Пояснение: топик — это контейнер, в который продюсеры пишут данные, а консьюмеры читают.

Для чего нужны партиции?
✅ B) Чтобы масштабировать обработку и распределять нагрузку.
Пояснение: сообщения распределяются по партициям, что позволяет работать параллельно.

Что делает ключ сообщения?
✅ B) Определяет, в какую партицию попадёт сообщение.
Пояснение: Kafka использует ключ для хэширования и выбора партиции.

Что такое offset?
✅ B) Уникальный ID сообщения.
Пояснение: offset — это порядковый номер сообщения внутри партиции.

At-least-once значит…
✅ B) Сообщение доставится хотя бы один раз, возможно с дубликатами.
Пояснение: гарантируется доставка, но при ретраях могут появиться повторы.

При ack=0 риск какой?
✅ A) Потеря сообщений.
Пояснение: продюсер не ждёт подтверждения от брокера, поэтому при сбое данные могут не сохраниться.

Зачем нужны реплики в кластере Kafka?
✅ B) Для отказоустойчивости.
Пояснение: если лидер партиции упадёт, одна из реплик станет новым лидером.

Кто читает данные из партиции?
✅ A) Только лидер.
Пояснение: консьюмеры читают данные всегда с лидера партиции, не с реплик.


Эталонное решение (Практика для Kafka)
1. Docker Compose

Файл docker-compose.yml:

version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

2. Запуск
docker compose up -d


Проверить, что сервисы поднялись:

docker ps


Ожидаемый результат: контейнеры zookeeper и kafka работают.

3. Создание топика
docker exec -it kafka kafka-topics --create \
  --topic demo-topic \
  --bootstrap-server localhost:9092 \
  --partitions 1 \
  --replication-factor 1


Проверить:

docker exec -it kafka kafka-topics --list --bootstrap-server localhost:9092


Ожидаемый вывод:

demo-topic

4. Продюсер (отправка сообщений)
docker exec -it kafka kafka-console-producer \
  --topic demo-topic \
  --bootstrap-server localhost:9092


В интерактивном режиме введите:

Hello Kafka


(нажмите Enter, затем Ctrl+D или Ctrl+C чтобы выйти).

5. Консьюмер (чтение сообщений)
docker exec -it kafka kafka-console-consumer \
  --topic demo-topic \
  --from-beginning \
  --bootstrap-server localhost:9092


Ожидаемый вывод:

Hello Kafka

6. Критерии успешности

Топик demo-topic создан.

Сообщение Hello Kafka отправлено.

Сообщение успешно получено консьюмером.

